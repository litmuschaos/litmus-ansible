- block:
    - block:
        - name: "[Prepare]: Select the application pod"
          shell: >
            kubectl get pod -l {{ a_label }} -n {{ namespace }}
            -o=custom-columns=:metadata.name --no-headers
            | shuf | head -1 
          args:
            executable: /bin/bash
          register: app_pod_name

        - name: "[Prepare]: Recording the application pod name"
          set_fact:
            app_pod: "{{ app_pod_name.stdout }}"
      when: "app_pod is not defined or app_pod == ''"

    - name: "[Prepare]: Identify the application node name"
      shell: >
        kubectl get pod {{ app_pod }} -n {{ namespace }}
        --no-headers -o custom-columns=:spec.nodeName
      args:
        executable: /bin/bash
      register: app_node

    - set_fact: 
        app_node: "{{ app_node.stdout }}"

    - block: 
        - name: "[Prepare:] Generate a run id if not passed from the engine/experiment"
          shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
          register: rand_string   

        - set_fact:
            run_id: "{{ rand_string.stdout | lower }}"
      when: "run_id is not defined or run_id == ''"        
    
    - block:
        - name: "[Prepare]: Derive the application container name"
          shell: >
            kubectl get pods -l {{ label }} -n {{ namespace }} -o jsonpath='{.items[0].spec.containers[0].name}'
          args:
            executable: /bin/bash
          register: container

        - name: "[Prepare]: Record the application container name"
          set_fact:
            a_container: "{{ container.stdout }}"
      when: app_container is not defined or app_container == ''

    - block:

        - name: "[Prepare]: Record the application container name"
          set_fact:
            a_container: "{{ app_container }}"
        
      when: app_container is defined and app_container != ''

    - block:

        - debug:
            msg: "***** Waiting for the ramp interval of {{ ramp_time }}s *****"

        - name: "[Ramp]: Waiting for the specified ramp time before injecting chaos"
          wait_for: timeout="{{ ramp_time }}"

      when: "ramp_time is defined and ramp_time != ''" 
    
    - name: "[Prepare]: Patch the chaoslib image to pumba pod"
      template:
        src:  /chaoslib/pumba/pumba.j2
        dest: /tmp/pumba_kube.yml
      vars:
        pumba_image: "{{ lib_image }}"
        app_pod: "{{ app_pod }}"
        app_container: "{{ a_container }}"

    ## RECORD EVENT FOR CHAOS INJECTION
    - name: "[Event]: Generating an Event for ChaosInjection"
      include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
      vars:
        stage: "ChaosInject"
        exp_pod_name: "{{ chaos_pod_name }}"
        engine_ns: "{{ c_ns }}"
        message: "Injecting {{ c_experiment }} chaos on {{ a_container }} container of {{ app_pod }} pod"
      when: "c_engine is defined and c_engine != ''"

    - name: "[Prepare]: Record the restartCount of application container"
      shell: >
        kubectl get pod {{ app_pod }} -n {{ namespace }}
        -o=jsonpath='{.status.containerStatuses[?(@.name=="{{ a_container }}")].restartCount}'
      args:
        executable: /bin/bash
      register: restartCnt_prev
      
    # Setting pod_running_status to nil
    - set_fact: 
        pod_running_status: ""

    # Pumba pods creation is attempted for a total of 3 times, if it is not immediately schedulable due to transient node conditions
    # If the pumba pod is not schedulable across these 3 tries, the experiment is failed with message indicating improper cluster state.
    - name: "[Prepare]: Including the util to create the chaos pod"
      include_tasks: /utils/common/create_chaos_pod.yml
      vars:
        pod_ns: "{{ c_ns }}"
        c_path: "/tmp/pumba_kube.yml"
        pod_label: "name=pumba-sig-kill-{{ run_id }}"
      with_sequence: start=1 end=3
    
    # Failing the execution, If pumba pod won't come to running state after three retries.
    - fail:
        msg: "pod_failure_by_sigkill lib failed, Unable to create as pumba couldn't be scheduled on the {{ app_node }} node"
      when: "pod_running_status is not defined or pod_running_status != 'Running'"

    - name: "[Wait]: Wait till the total chaos duration"
      wait_for: timeout="{{ c_duration }}"
      when: "c_duration is defined and c_duration != ''"

    - block:

        - name: "[CleanUP]: Tear down the pumba infrastructure"
          shell: >
            kubectl delete -f /tmp/pumba_kube.yml -n {{ c_ns }}
          args:
            executable: /bin/bash

        - name: "[CleanUP]: Confirm that the pumba pod is deleted successfully"
          shell: >
            kubectl get pods -l name=pumba-sig-kill-{{ run_id }} --no-headers -n {{ c_ns }}
          args:
            executable: /bin/bash
          register: result
          until: "'No resources found' in result.stderr"
          delay: 2
          retries: 90

      when: "pod_running_status is defined and pod_running_status == 'Running'"
            
    - block:
        - debug:
            msg: "***** Waiting for the ramp interval of {{ ramp_time }}s *****"
    
        - name: "[Ramp]: Waiting for the specified ramp time after injecting chaos"
          wait_for: timeout="{{ ramp_time }}"
    
      when: "ramp_time is defined and ramp_time != ''" 

    - name: "[Verify]: Verify the restartCount of application container"
      shell: >
        kubectl get pod {{ app_pod }} -n {{ namespace }}
        -o=jsonpath='{.status.containerStatuses[?(@.name=="{{ a_container }}")].restartCount}'
      args:
        executable: /bin/bash
      register: restartCnt
      until: "restartCnt.stdout|int > restartCnt_prev.stdout|int"
      delay: 2
      retries: 90

  rescue: 

    - block: 

        - name: "[CleanUP]: Tear down the pumba infrastructure"
          shell: >
            kubectl delete -f /tmp/pumba_kube.yml -n {{ c_ns }}
          args:
            executable: /bin/bash
          when: chaos_pod_result.rc == 0
        
        - name: "[CleanUP]: Confirm that the pumba pod is deleted successfully"
          shell: >
            kubectl get pods -l name=pumba-sig-kill-{{ run_id }} --no-headers -n {{ c_ns }}
          args:
            executable: /bin/bash
          register: result
          until: "'No resources found' in result.stderr"
          delay: 2
          retries: 90
      when: "(pod_running_status is defined and pod_running_status == 'Running') and chaos_pod_result is defined"

    - fail:
        msg: "pod_failure_by_sigkill lib failed"
      when: true
