---
- block:
  - name: "[Prepare]: Select the app pod"
    shell: >
      kubectl get pod -l {{ a_label }} -n {{ namespace }}
      -o=custom-columns=:metadata.name --no-headers
      | shuf | head -1 
    args:
      executable: /bin/bash
    register: app_pod_name

  - name: "[Prepare]: Record app pod name"
    set_fact:
      app_pod: "{{ app_pod_name.stdout }}"
  when: "app_pod is not defined or app_pod == ''"

- name: "[Prepare]: Identify the application node"
  shell: >
    kubectl get pod {{ app_pod }} -n {{ namespace }}
    --no-headers -o custom-columns=:spec.nodeName
  args:
    executable: /bin/bash
  register: app_node

- set_fact: 
    app_node: "{{ app_node.stdout }}"

- block:
  - name: "[Prepare]: Record the application container"
    shell: >
      kubectl get pods -l {{ label }} -n {{ namespace }} -o jsonpath='{.items[0].spec.containers[0].name}'
    args:
       executable: /bin/bash
    register: container

  - name: "[Prepare]: Record the app_container"
    set_fact:
       app_container: "{{ container.stdout }}"
  when: "app_container is not defined or app_container == ''"

- block:
  - name: "[Prepare]: Generate a run id if not passed from the engine/experiment"
    shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
    register: rand_string   

  - set_fact:
      run_id: "{{ rand_string.stdout | lower }}"
  when: "run_id is not defined or run_id == ''"

- name: "[Prepare]: Deriving the chaos iterations"
  set_fact:
    c_iterations: "{{ (c_duration|int / c_interval|int)|int }}"
  when: c_iterations is not defined and (c_interval is defined and c_interval|int !=0)

- name: "[Prepare]: Setting the min chaos count to one"
  set_fact: 
     c_iterations: 1
  when: "c_iterations is not defined or c_iterations == '0'"

- block:

  - debug:
      msg: "***** Waiting for the ramp interval of {{ ramp_time }}s *****"

  - name: "[Ramp]: Waiting for the specified ramp time before injecting chaos"
    wait_for: timeout="{{ ramp_time }}"

  when: "ramp_time is defined and ramp_time != ''" 

- name: "[Prepare]: Getting the serviceAccountName"
  shell: >
    kubectl get pod {{ chaos_pod_name }} -n {{ c_ns }} -o 
    custom-columns=:.spec.serviceAccountName --no-headers
  args:
    executable: /bin/bash
  register: chaos_service_account

- name: "[Prepare]: Patch the chaoslib image"
  template:
    src:  /chaoslib/litmus/container_kill/container-killer.j2
    dest: /tmp/container-killer.yml
  vars:
    container_killer_image: "{{ lib_image }}"
    c_svc_acc: "{{ chaos_service_account.stdout }}"
    
# Setting pod_running_status to nil
- set_fact: 
    pod_running_status: ""
        
# container-killer chaos pods creation is attempted for a total of 3 times, if it is not immediately schedulable due to transient node conditions
# If the container-killer chaos pod is not schedulable across these 3 tries, the experiment is failed with message indicating improper cluster state.
- include_tasks: /utils/common/create_chaos_pod.yml
  vars:
    pod_ns: "{{ c_ns }}"
    c_path: "/tmp/container-killer.yml"
    pod_label: "name=container-killer-{{ run_id }}"
  with_sequence: start=1 end=3

# Failing the execution, If container-killer chaos pod won't come to running state after three retries.
- fail:
    msg: "crictl-chaos lib failed, Unable to create as container-killer chaos pod couldn't be scheduled on the {{ app_node }} node"
  when: "pod_running_status is not defined or pod_running_status != 'Running'"

# chaosStartTimeStamp contains the start timestamp
- name: "[Prepare]: Getting the chaos start timestamp"
  set_fact: chaosStartTimeStamp="{{lookup('pipe','date \"+%Y-%m-%d %H:%M:%S\"')}}"

- name: "[Wait]: Wait until the container-killer chaos pod is completed"
  shell: >
    kubectl get pods -l name=container-killer-{{ run_id }} --no-headers -n {{ c_ns }}
    --no-headers -o custom-columns=:status.phase
  args: 
    executable: /bin/bash
  register: result
  until: "result.stdout == 'Succeeded' or result.stdout == 'Failed'"
  delay: 1
  retries: "{{ c_duration }}"

# chaosCurrentTimeStamp contains the current timestamp
- name: "[Prepare]: Getting the chaos current timestamp"
  set_fact: chaosCurrentTimeStamp="{{lookup('pipe','date \"+%Y-%m-%d %H:%M:%S\"')}}"

# chaosDiffTimeStamp contains the difference of current timestamp and start timestamp
# it will helpful to track the run duration of helper pod
- set_fact:
    chaosDiffTimeStamp: "{{ ((chaosCurrentTimeStamp | to_datetime) - (chaosStartTimeStamp | to_datetime)).total_seconds()  }}"

- fail:
    msg: "container-killer chaos pod failed"
  when: "chaosDiffTimeStamp|int < c_duration|int"
      
- block:

  - name: "[CleanUP]: Delete the crictl-chaos pod"
    shell: >
      kubectl delete -f /tmp/container-killer.yml -n {{ c_ns }} 
    args:
      executable: /bin/bash
    
  - name: "[CleanUP]: Confirm that the container-killer chaos pod is deleted successfully"
    shell: >
      kubectl get pods -l name=container-killer-{{ run_id }} --no-headers -n {{ c_ns }}
    args:
      executable: /bin/bash
    register: result
    until: "'No resources found' in result.stderr"
    delay: 2
    retries: 90

  when: "chaosDiffTimeStamp|int >= c_duration|int"

- block:
  - debug:
      msg: "***** Waiting for the ramp interval of {{ ramp_time }}s *****"

  - name: "[Ramp]: Waiting for the specified ramp time after injecting chaos"
    wait_for: timeout="{{ ramp_time }}"

  when: "ramp_time is defined and ramp_time != ''" 