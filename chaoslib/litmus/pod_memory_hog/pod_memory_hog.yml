---
- block: 

    - block: 

      - name: "[Prepare]: Select the application pod"
        shell: >
          kubectl get pod -l {{ app_label }} -n {{ app_ns }}
          -o=custom-columns=:metadata.name --no-headers
          | shuf | head -1 
        args:
          executable: /bin/bash
        register: app_pod_name

      - name: "[Prepare]: Recording the application pod name"
        set_fact:
          app_pod: "{{ app_pod_name.stdout }}"

      when: "app_pod is not defined or app_pod == ''"

    # here app_ns is the namespace of pod on which we are performing memory chaos 
    # in genric experiments app_ns is same as app_ns
    # in openebs experiments app_ns is the namespace where openebs is installed i.e, openebs
    - name: "[Prepare]: Identify the application node name"
      shell: >
        kubectl get pod {{ app_pod }} -n {{ app_ns }}
        --no-headers -o custom-columns=:spec.nodeName
      args:
        executable: /bin/bash
      register: app_node

    - name: "[Prepare]: Record the application node name"
      set_fact: 
        app_node: "{{ app_node.stdout }}"

    - block: 
        - name: "[Prepare:] Generate a run id if not passed from the engine/experiment"
          shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
          register: rand_string   

        - set_fact:
            run_id: "{{ rand_string.stdout | lower }}"
      when: "run_id is not defined or run_id == ''"

    - block:

        - name: "[Prepare]: Derive the application container name"
          shell: >
            kubectl get pods -n {{ app_ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ app_pod }}")].spec.containers[0].name}'
          args:
            executable: /bin/bash
          register: container
  
        - name: "[Prepare]: Record the application container name"
          set_fact:
            c_container: "{{ container.stdout }}"
  
      when: c_container is not defined or c_container == ''

    - name: "[Prepare]: Obtain the Container ID of the target container"
      shell: >
        kubectl get pods {{ app_pod }} -n {{ app_ns }} 
        -o jsonpath='{.status.containerStatuses[?(@.name=="{{ c_container }}")].containerID}'
        | awk -F 'docker://' '{print $2}' 
      args:
        executable: /bin/bash
      register: container_id

    - name: "[Prepare]: Record the Container ID of the target container"
      set_fact:
        c_container_id: "{{ container_id.stdout }}"
 
    - name: "[Prepare]: Patch the lib image to memory stress job template"
      template:
        src:  /chaoslib/litmus/pod_memory_hog/app_memory_stress.j2
        dest: /tmp/app_memory_stress.yml
      vars:
        memory_stress_image: "{{ lib_image }}"

    ## RECORD EVENT FOR CHAOS INJECTION
    - name: "[Event]: Generating an Event for ChaosInjection"
      include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
      vars:
        stage: "ChaosInject"
        exp_pod_name: "{{ chaos_pod_name }}"
        engine_ns: "{{ c_ns }}"
        message: "Injecting {{ c_experiment }} chaos on {{ app_pod }} pod"
      when: "c_engine is defined and c_engine != ''"

    # Setting pod_running_status to nil
    - name: Setting pod_running_status to nil
      set_fact: 
        pod_running_status: ""
        
      # Pod Memory Hog pods creation is attempted for a total of 3 times, if it is not immediately schedulable due to transient node conditions
      # If the pod-memory-hog pod is not schedulable across these 3 tries, the experiment is failed with message indicating improper cluster state.
    - name: "[Prepare]: Including the util to create the chaos pod"
      include_tasks: /utils/common/create_chaos_pod.yml
      vars:
        pod_ns: "{{ c_ns }}"
        c_path: "/tmp/app_memory_stress.yml"
        pod_label: "name=app-memory-stress-{{ run_id }}"
      with_sequence: start=1 end=3

    # Failing the execution, If pod-memory-hog pod won't come to running state after three retries.
    - fail:
        msg: "pod_memory_hog lib failed, Unable to create as pod-memory-hog pod couldn't be scheduled on the {{ app_node }} node"
      when: "pod_running_status is not defined or pod_running_status != 'Running'"
 
    ## with a grace period of 2 min before memory stress job terminate
    - name: "[Wait]: Calculate the total wait time for memory stress job"
      set_fact:
        job_wait_time: "{{ ((c_duration|int) + 120)| int }}"

    - name: "[Wait]: Wait until the memory stress job is completed"
      shell: >
        kubectl get pods -l name=app-memory-stress-{{ run_id }} --no-headers -n {{ c_ns }}
        --no-headers -o custom-columns=:status.phase
      args: 
        executable: /bin/bash
      register: result
      until: "result.stdout == 'Succeeded'"
      delay: 1
      retries: "{{ job_wait_time }}"

    - block:

        - name: "[CleanUP]: Tear down memory chaos infrastructure"
          shell: >
            kubectl delete -f /tmp/app_memory_stress.yml -n {{ c_ns }} 
          args:
            executable: /bin/bash

        - name: "[CleanUP]: Confirm that the memory stress pod is deleted successfully"
          shell: >
            kubectl get pods -l name=app-memory-stress-{{ run_id }} --no-headers -n {{ c_ns }}
          args:
            executable: /bin/bash
          register: result
          until: "'No resources found' in result.stderr"
          delay: 2
          retries: 90

      when: "pod_running_status is defined and pod_running_status == 'Running'"

  rescue: 

    - block: 

        - name: "[CleanUP]: Tear down memory chaos infrastructure, if setup"
          shell: >
            kubectl delete -f /tmp/app_memory_stress.yml -n {{ c_ns }} 
          args:
            executable: /bin/bash
          when: "chaos_pod_result.rc == 0"
        
        - name: "[CleanUP]: Confirm that the memory stress pod is not present"
          shell: >
            kubectl get pods -l name=app-memory-stress-{{ run_id }} --no-headers -n {{ c_ns }}
          args:
            executable: /bin/bash
          register: result
          until: "'No resources found' in result.stderr"
          delay: 2
          retries: 90
      when: "(pod_running_status is defined and pod_running_status == 'Running') and chaos_pod_result is defined"

    - fail:
        msg: "pod_memory_hog lib failed"
      when: true
