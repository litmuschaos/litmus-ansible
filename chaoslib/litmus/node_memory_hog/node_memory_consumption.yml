 ## GETTING THE PRE CHAOS NODE NAME OF APPLICATION 
- block:
  
    - name: "[Prepare]: Getting the application pod name (pre-chaos)"
      k8s_facts:
        kind: Pod
        namespace: "{{ a_ns }}"
        label_selectors:
          - "{{ a_label }}"
      register: app_pod_name
    
    ## RECORDING THE NODE NAME ON WHICH APPLICATION IS RUNNING
    - name: "[Prepare]: Recording the application node name"
      set_fact:
        node_name: "{{ app_pod_name | json_query('resources[0].spec.nodeName')}}"
        
    - block:
        - name: "[Prepare]: Generate a run id if not passed from the engine/experiment"
          shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
          register: rand_string   

        - set_fact:
            run_id: "{{ rand_string.stdout | lower }}"
      when: "run_id is not defined or run_id == ''"
  
    ## RECORD EVENT FOR CHAOS INJECTION
    - name: "[Event]: Generating an Event for ChaosInjection"
      include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
      vars:
        stage: "ChaosInject"
        exp_pod_name: "{{ chaos_pod_name }}"
        engine_ns: "{{ c_ns }}"
        message: "Injecting {{ c_experiment }} chaos on {{ node_name }} node"
      when: "c_engine is defined and c_engine != ''"
    
    ## PATCH THE ENGINE UID
    - name: "[Prepare]: Patch the chaoslib image to chaos pod"
      template:
        src:  /chaoslib/litmus/node_memory_hog/node-memory-hog-pod.j2
        dest: /tmp/node-memory-hog-pod.yml
      vars:
        stress_time: "{{ c_duration }}s"
        total_memory_percentage: "{{ memory_percentage }}%"
        memory_stress_image: "{{ lib_image }}"

    - block:

        - debug:
            msg: "***** Waiting for the ramp interval of {{ ramp_time }}s *****"

        - name: "[Ramp]: Waiting for the specified ramp time before injecting chaos"
          wait_for: timeout="{{ ramp_time }}"

      when: "ramp_time is defined and ramp_time != ''" 

    # Setting pod_running_status to nil
    - set_fact: 
        pod_running_status: ""
        
     # Node Memory Hog pods creation is attempted for a total of 3 times, if it is not immediately schedulable due to transient node conditions
     # If the node-memory-hog pod is not schedulable across these 3 tries, the experiment is failed with message indicating improper cluster state.
    - name: "[Prepare]: Including the util to create the chaos pod"
      include_tasks: /utils/common/create_chaos_pod.yml
      vars:
        pod_ns: "{{ c_ns }}"
        c_path: "/tmp/node-memory-hog-pod.yml"
        pod_label: "name=node-memory-hog-{{ run_id }}"
      with_sequence: start=1 end=3

    # Failing the execution, If node-memory-hog pod won't come to running state after three retries.
    - fail:
        msg: "node_memory_consumption lib failed, Unable to create as node-memory-hog pod couldn't be scheduled on the {{ node_name }} node"
      when: "pod_running_status is not defined or pod_running_status != 'Running'"

    ## CHECKING THE STATUS OF JOB
    - name: "[Wait]: Wait until the node memory hog job is completed"
      k8s_facts:
        kind: Pod
        namespace: "{{ c_ns }}"
        label_selectors:
          - name=node-memory-hog-{{ run_id }}
      register: job_pod
      until: "{{ job_pod | json_query('resources[0].status.phase') == 'Succeeded' }}"
      delay: 1
      retries: "{{ c_duration | int  + 60 }}"
    
    ## GETTING THE JOB POD LOGS UNDER STRESS
    - name: "[Logs]: Print the logs of chaos pod"
      shell: kubectl logs {{ job_pod.resources[0].metadata.name }} -n {{ c_ns }}
      args:
        executable: /bin/bash

    - block:
        - debug:
            msg: "***** Waiting for the ramp interval of {{ ramp_time }}s *****"

        - name: "[Ramp]: Waiting for the specified ramp time after injecting chaos"
          wait_for: timeout="{{ ramp_time }}"

      when: "ramp_time is defined and ramp_time != ''" 

    ## GETTING THE NODE STATUS
    - name: "[Status]: Getting the status of application node"
      shell: kubectl get nodes {{ node_name }} | awk '{print $2}' | tail -n1
      register: node_status

    - block:

        ## DELETING THE NODE MEMORY HOG POD
        - name: "[CleanUP]: Deleting the Node Memory Hog Pod"
          shell: kubectl delete -f /tmp/node-memory-hog-pod.yml -n {{ c_ns }}
          args:
            executable: /bin/bash
    
        ## CHECKING WHETHER NODE MEMORY HOG POD IS DELETED SUCCESSFULLY
        - name: "[CleanUP]: Confirm that the Node Memory Hog Pod is deleted successfully"
          k8s_facts:
            kind: Pod
            namespace: "{{ c_ns }}"
            label_selectors:
              - name=node-memory-hog-{{ run_id }}
          register: resource_pod
          until: "resource_pod.resources | length < 1"
          delay: 2
          retries: 90

      when: "pod_running_status is defined and pod_running_status == 'Running'"

  rescue: 

    - block: 

        ## REMOVING THE NODE MEMORY HOG Pod
        - name: "[CleanUP]: Deleting the Node Memory Hog Pod"
          shell: >
            kubectl delete -f /tmp/node-memory-hog-pod.yml -n {{ c_ns }}
          args:
            executable: /bin/bash
          when: "chaos_pod_result.rc == 0 "
        
        ## CHECKING WHETHER NODE MEMORY HOG POD IS DELETED SUCCESSFULLY
        - name: "[CleanUP]: Confirm that the node memory Hog Pod is deleted successfully"
          k8s_facts:
            kind: Pod
            namespace: "{{ c_ns }}"
            label_selectors:
              - name=node-memory-hog-{{ run_id }}
          register: resource_pod
          until: "resource_pod.resources | length < 1"
          delay: 2
          retries: 90
      when: "(pod_running_status is defined and pod_running_status == 'Running') and chaos_pod_result is defined"

    ## FAIL WHEN ENTERS IN RESCUE BLOCK
    - name: "[Fail]: Fail the task if it enters in the rescue block"
      fail:
        msg: "node_memory_consumption lib failed"
      when: true
      
