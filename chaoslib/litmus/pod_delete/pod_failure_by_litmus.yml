---
- block:
    - name: "[Prepare]: Deriving the chaos iterations"
      set_fact:
        c_iterations: "{{ (c_duration|int / c_interval|int)|int }}"
      when: c_iterations is not defined and (c_interval is defined and c_interval|int !=0)

    - name: "[Prepare]: Deriving the chaos interval"
      set_fact:
        c_interval: "{{ (c_duration|int / c_iterations|int)|int }}"
      when: c_interval is not defined and c_iterations is defined

    - name: "[Prepare]: Setting the min chaos count to one"
      set_fact: 
        c_iterations: 1
      when: "c_iterations is not defined or c_iterations == '0'"

    - block:

        - debug:
            msg: "***** Waiting for the ramp interval of {{ ramp_time }}s *****"

        - name: "[Ramp]: Waiting for the specified ramp time before injecting chaos"
          wait_for: timeout="{{ ramp_time }}"

      when: "ramp_time is defined and ramp_time != ''" 

    - block:
        - name: "[Prepare]: Generate a run id if not passed from the engine/experiment"
          shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
          register: rand_string   

        - set_fact:
            run_id: "{{ rand_string.stdout | lower }}"
      when: "run_id is not defined or run_id == ''"

    - name: Getting the serviceAccountName
      shell: >
        kubectl get pod {{ chaos_pod_name }} -n {{ c_ns }} -o 
        custom-columns=:.spec.serviceAccountName --no-headers
      args:
        executable: /bin/bash
      register: chaos_service_account

    - name: "[Prepare]: Including the litmus LIB for random pod deletion"
      template:
        src:  /chaoslib/litmus/pod_delete/pod-delete.j2
        dest: /tmp/pod-delete-chaos.yml
      vars:
        c_svc_acc: "{{ chaos_service_account.stdout }}"
        pod_delete_image: "{{ lib_image }}"

    # chaosStartTimeStamp contains the start timestamp
    - name: "[Prepare]: Getting the chaos start timestamp"
      set_fact: chaosStartTimeStamp="{{lookup('pipe','date \"+%Y-%m-%d %H:%M:%S\"')}}"

    - name: "[Prepare]: Create helper pod for pod delete chaos"
      shell: kubectl create -f /tmp/pod-delete-chaos.yml -n {{ c_ns }}
      args:
        executable: /bin/bash
      register: helper_pod

    - name: "[Status]: Checking the running status of the helper pod"
      shell: >
        kubectl get pods -l name=pod-delete-{{ run_id }} -n {{ c_ns }} -o custom-columns=:.status.phase --no-headers
      register: pod_result
      until: "((pod_result.stdout.split()|unique)|length) == 1 and 'Running' in pod_result.stdout"
      delay: 2
      retries: 90

    - name: "[Status]: Checking whether helper pods is in completed state"
      shell: kubectl get pods -n {{ c_ns }} -l name=pod-delete-{{ run_id }} -o custom-columns=:.status.phase --no-headers
      register: result
      until: "result.stdout == 'Succeeded' or result.stdout == 'Failed'"
      delay: 1
      retries: "{{ c_duration|int + 10 }}"

      # chaosCurrentTimeStamp contains the current timestamp
    - name: "[Prepare]: Getting the chaos current timestamp"
      set_fact: chaosCurrentTimeStamp="{{lookup('pipe','date \"+%Y-%m-%d %H:%M:%S\"')}}"

    # chaosDiffTimeStamp contains the difference of current timestamp and start timestamp
    # it will helpful to track the run duration of helper pod
    - set_fact:
        chaosDiffTimeStamp: "{{ ((chaosCurrentTimeStamp | to_datetime) - (chaosStartTimeStamp | to_datetime)).total_seconds()  }}"
    
    - fail:
        msg: "pod-delete-chaos pod failed"
      when: "chaosDiffTimeStamp|int < c_duration|int"  

    - block: 

        - name: "[CleanUP]: Tear down pod delete helper pod"
          shell: kubectl delete -f /tmp/pod-delete-chaos.yml -n {{ c_ns }}
          args:
            executable: /bin/bash

        - name: "[Status]: Confirm that the pod delete helper pod is deleted"
          shell: >
            kubectl get pods -n {{ c_ns }} -l name=pod-delete-{{ run_id }} -o custom-columns=:.status.phase --no-headers
          args: 
            executable: /bin/bash
          register: result_status
          until: result_status.stdout ==''
          delay: 2
          retries: 90

      when: "chaosDiffTimeStamp|int >= c_duration|int"

    - block:
        - debug:
            msg: "***** Waiting for the ramp interval of {{ ramp_time }}s *****"

        - name: "[Ramp]: Waiting for the specified ramp time after injecting chaos"
          wait_for: timeout="{{ ramp_time }}"

      when: "ramp_time is defined and ramp_time != ''"
  