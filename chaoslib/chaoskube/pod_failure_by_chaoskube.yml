###### note: the chaoskube library is not supported by litmuschaos any more. 
###### it will be left here, because it can be used if the chaosServiceAccount has cluster-scope.
###### as of version 0.8 chaosexperiments are namespace-scoped


- block: 

#    - name: Replace CHAOSKUBE_NS (placeholder) with APP_NS
#      replace: 
#        path: /chaoslib/chaoskube/chaoskube.yaml
#        regexp: 'CHAOSKUBE_NS'
#        replace: "{{ namespace }}"

    - name: Replace CHAOSKUBE_SVC_ACC (placeholder) 
      replace: 
        path: /chaoslib/chaoskube/chaoskube.yml
        regexp: 'CHAOS_SERVICE_ACCOUNT'
        replace: "{{ lookup('env','CHAOSKUBE_SVC_ACC') }}"

    - name: Replace CHAOS_NS (placeholder) 
      replace: 
        path: /chaoslib/chaoskube/chaoskube.yml
        regexp: 'CHAOS_NAMESPACE'
        replace: "{{ namespace }}"

    - name: Setup chaoskube infrastructure
      shell: |
        kubectl apply -f /chaoslib/chaoskube/chaoskube.yml -n {{ namespace }}
      args:
        executable: /bin/bash

    - name: Confirm that chaoskube pod is running
      shell: >
        kubectl get pod -l app=chaoskube
        --no-headers -n {{ namespace }}
      args:
        executable: /bin/bash
      register: chaoskube
      until: "'Running' in chaoskube.stdout"
      delay: 2
      retries: 90

    - name: Set the chaoskube pod name to variable
      set_fact:
        chaospod: "{{ chaoskube.stdout.split()[0] }}"

    - name: Get the name of the owner (deploy/ds/sts)
      shell: >
        kubectl get {{ kind }} -n {{ namespace }}
        -l {{ label }} --no-headers -o=custom-columns=NAME:".metadata.name"
      args:
        executable: /bin/bash
      register: result_deploy

    - name: Set the deployment name to variable
      set_fact:
        aut: "{{ result_deploy.stdout }}"

    - name: Get the resourceVersion of the {{ aut }}
      shell: >
        kubectl get {{ kind }} -n {{ namespace }}
        {{ aut }} -o yaml | grep resourceVersion
        | awk '{print $2}' | sed 's|"||g'
      args:
        executable: /bin/bash
      register: rv_bef
      changed_when: true

    - name: Initiate periodic pod failures through chaoskube
      shell: >
        kubectl exec {{ chaospod }} -n {{ namespace }}
        -- timeout -t {{ chaos_duration }} chaoskube
        --labels {{ label }}
        --no-dry-run --interval={{ chaos_interval }}s
        --debug
        --namespaces={{ namespace }}
      args:
        executable: /bin/bash
      register: chaos_result
      ignore_errors: true

    - name: Get the resourceVersion of the {{ aut }} 
      shell: >
        kubectl get {{ kind }} -n {{ namespace }}
        {{ aut }} -o yaml | grep resourceVersion
        | awk '{print $2}' | sed 's|"||g'
      args:
        executable: /bin/bash
      register: rv_aft

    - name: Compare resourceVersions of {{ aut }} 
      debug:
        msg: "Verified replica pods were restarted by chaoskube"
      failed_when: "rv_bef.stdout | int == rv_aft.stdout | int"

  when: action == "deletepod"

- block: 

    - name: Tear down chaoskube infrastructure
      shell: |
        kubectl delete -f /chaoslib/chaoskube/chaoskube.yml -n {{ namespace }}
      args:
        executable: /bin/bash
      register: result

    - name: Confirm that the chaoskube deploy is deleted successfully
      shell: >
        kubectl get pod -l app=chaoskube
        --no-headers -n {{ namespace }}
      args:
        executable: /bin/bash
      register: result
      until: "'Running' not in result.stdout"
      delay: 2
      retries: 90

  when: action == "cleanup"
