---
- block:

    - block:

        - debug:
            msg: "***** Waiting for the ramp interval of {{ ramp_time }}s *****"

        - name: "[Ramp]: Waiting for the specified ramp time before injecting chaos"
          wait_for: timeout="{{ ramp_time }}"

      when: "ramp_time is defined and ramp_time != ''"

    - block:
        - name: "[Prepare]: Generate a run id if not passed from the engine/experiment"
          shell: echo $(mktemp) | cut -d '.' -f 2 | cut -c -6
          register: rand_string

        - set_fact:
            run_id: "{{ rand_string.stdout | lower }}"
      when: "run_id is not defined or run_id == ''"

    - name: Getting the serviceAccountName
      shell: >
        kubectl get pod {{ chaos_pod_name }} -n {{ c_ns }} -o
        custom-columns=:.spec.serviceAccountName --no-headers
      args:
        executable: /bin/bash
      register: chaos_service_account

    - name: "[Prepare]: Set the state of vm to stop"
      uri:
        url: https://{{ vcenter_server }}/rest/vcenter/vm/{{ vm_moid1 }}/power/stop
        force_basic_auth: yes
        validate_certs: no
        method: POST
        headers:
          Cookie: "{{ login.set_cookie }}"
      register: result1

    - debug:
        msg: "VM is powered-off"

    - name: "[TimeOut]: Timeout for 1 minute"
      pause:
        minutes: 1

    - name: "[Prepare]: Set the state of vm to start"
      uri:
        url: https://{{ vcenter_server }}/rest/vcenter/vm/{{ vm_moid1 }}/power/start
        force_basic_auth: yes
        validate_certs: no
        method: POST
        headers:
          Cookie: "{{ login.set_cookie }}"
      register: result1

    - name: "[Status]: Get the current status of vm"
      uri:
        url: https://{{ vcenter_server }}/rest/vcenter/vm/{{ vm_moid1 }}/power/
        force_basic_auth: yes
        validate_certs: no
        headers:
          Cookie: "{{ login.set_cookie }}"
      register: result
      until: "'{{ result.json.value.state }}' ==  'POWERED_ON'"
      delay: 2
      retries: 5

    - debug:
        msg: "The state of vm is {{ result.json.value.state }}"

    - fail:
        msg: "vm-delete-chaos pod failed"
      when: "result.json.value.state == 'POWERED_OFF'"


    - block:
        - debug:
            msg: "***** Waiting for the ramp interval of {{ ramp_time }}s *****"

        - name: "[Ramp]: Waiting for the specified ramp time after injecting chaos"
          wait_for: timeout="{{ ramp_time }}"

      when: "ramp_time is defined and ramp_time != ''"

