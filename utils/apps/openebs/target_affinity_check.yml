- name: "[Afinity]: Obtain node where app pod resides"
  k8s_facts:
    kind: Pod
    label_selectors:
      - "{{ a_label }}"
    namespace: "{{ a_ns }}"
  register: app_node
  failed_when: app_node.resources | length < 1

- debug:
    msg: "{{ app_node | json_query('resources[*].spec.nodeName')}}"

- name: "[Afinity]: Derive PV from application PVC"
  k8s_facts:
    kind: PersistentVolumeClaim 
    name: "{{ a_pvc }}"
    namespace: "{{ a_ns }}"
  register: pv
  failed_when: pv.resources | length < 1

- debug:
    msg: "{{ pv | json_query('resources[*].spec.volumeName')}}"

- name: "[Afinity]: Derive storage engine from PV"
  k8s_facts:
    kind: PersistentVolume
    name: "{{ pv | json_query('resources[0].spec.volumeName')}}"
  register: stg_engine

- debug:
    msg: "{{ item.metadata.annotations['openebs.io/cas-type'] }}"
  with_items: "{{ stg_engine.resources }}"
  
- set_fact: 
    target_ns: "{{ a_ns }}"
    target_label: "openebs.io/controller=jiva-controller"
  when: stg_engine.resources.0.metadata.annotations['openebs.io/cas-type'] == 'jiva'


## TODO: Account for the case where cstor target can reside in app_ns
## For future: Leave a bool var called {{ target_in_app_ns }} as undefined

- set_fact:
    target_ns: "{{ openebs_ns }}"
    target_label: "openebs.io/target=cstor-target"
  when: stg_engine.resources.0.metadata.annotations['openebs.io/cas-type'] == 'cstor' and target_in_app_ns is undefined

- name: "[Afinity]: Obtain the node where PV target pod resides"
  k8s_facts:
    kind: Pod
    namespace: "{{ target_ns }}"
    label_selectors:
      - "{{ target_label }}"
      - "openebs.io/persistent-volume={{ pv.resources.0.spec.volumeName }}"
  register: target_node

- name: "[Afinity]: Verify whether the app & target pod co-exist on same node"
  debug: 
    msg: "App and Target affinity is maintained"
  failed_when: target_node.resources.0.spec.nodeName != app_node.resources.0.spec.nodeName