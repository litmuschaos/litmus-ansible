- name: "[Liveness]: Generate a random strint as suffix to topic name"
  shell: echo $(mktemp) | cut -d '.' -f 2
  args: 
    executable: /bin/bash
  register: uniqstr

- name: "[Liveness]: Set the kafka topic name to a variable"
  set_fact:
    kafka_topic: "topic-{{ uniqstr.stdout }}"

- name: "[Liveness]: Generate the kafka liveness spec from template"
  template: 
    src: /utils/apps/kafka/kafka_liveness_non_auth.j2
    dest: /tmp/kafka_liveness.yml
  when: kafka_sasl_auth is not defined or kafka_sasl_auth == '' or kafka_sasl_auth == 'disabled'

- name: "[Liveness]: Generate the kafka liveness spec from template"
  template: 
    src: /utils/apps/kafka/kafka_liveness_sasl_auth.j2
    dest: /tmp/kafka_liveness.yml
  when: kafka_sasl_auth is defined and kafka_sasl_auth == 'enabled' 

- name: "[Liveness]: Apply the pub-sub kafka liveness application"
  shell: 
    kubectl apply -f /tmp/kafka_liveness.yml -n {{ kafka_ns }}
  args:
    executable: /bin/bash
  register: result
  failed_when: "result.rc != 0"

- name: "[Liveness]: Confirm that the kafka liveness pod is running"
  shell: 
    kubectl get pod -l name=kafka-liveness --no-headers -n {{ kafka_ns }}
  args:
    executable: /bin/bash
  register: result
  until: "'Running' in result.stdout"
  delay: 2
  retries: 90

- name: "[Liveness]: Fetch the kafka-liveness pod name"
  shell: 
    kubectl get pods -n {{ kafka_ns }} -l name=kafka-liveness -o jsonpath='{.items[0].metadata.name}' 
  register: kafka_liveness_pod

- block: 

    - name: "[Liveness]: Obtain the leader broker ordinality for the topic (partition) created by kafka-liveness"
      shell: > 
        kubectl exec {{ kafka_liveness_pod.stdout }} -n {{ kafka_ns }} -c kafka-consumer 
        -- kafka-topics --topic {{ kafka_topic }} --describe --zookeeper {{ zk_service }}:{{ zk_port }}
        | grep -o 'Leader: [^[:space:]]*' | awk '{print $2}'
      args:
        executable: /bin/bash
      register: ordinality_non_instance
      failed_when: "ordinality_non_instance.rc != 0"

    - set_fact: 
        ordinality: "{{ ordinality_non_instance.stdout }}"

  when: kafka_instance is not defined or kafka_instance == ''

- block: 

    - name: "[Liveness]: Obtain the leader broker ordinality for the topic (partition) created by kafka-liveness"
      shell: > 
        kubectl exec {{ kafka_liveness_pod.stdout }} -n {{ kafka_ns }} -c kafka-consumer 
        -- kafka-topics --topic {{ kafka_topic }} --describe --zookeeper {{ zk_service }}:{{ zk_port }}/{{ kafka_instance }}
        | grep -o 'Leader: [^[:space:]]*' | awk '{print $2}'
      args:
        executable: /bin/bash
      register: ordinality_instance
      failed_when: "ordinality_instance.rc != 0"

    - set_fact: 
        ordinality: "{{ ordinality_instance.stdout }}"

  when: kafka_instance is defined and kafka_instance != ''


- name: "[Liveness]: Determine the leader broker pod name"
  shell: 
    kubectl get pods -l {{ kafka_label }} --no-headers -o custom-columns=:metadata.name | grep '^.*-{{ ordinality }}$'
  args:
    executable: /bin/bash
  register: leader_broker
  failed_when: "leader_broker.rc != 0"

- name: "[Liveness]: Set the kafka broker to be subjected to chaos"
  set_fact: 
    liveness_topic_leader: "{{ leader_broker.stdout }}"
