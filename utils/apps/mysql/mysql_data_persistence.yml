---
- block:

   - name: "[Data-Persistence]: Create some test data in the mysql database"
     shell: >
       kubectl exec {{ pod_name }} -n {{ ns }} 
       -- {{ item }}
     args:
       executable: /bin/bash
     register: result
     failed_when: "result.rc != 0"
     with_items:
       - mysql -u{{ dbuser }} -p{{ dbpassword }} -e 'create database {{ dbname }};'
       - mysql -u{{ dbuser }} -p{{ dbpassword }} -e 'create table ttbl (Data VARCHAR(20));' {{ dbname }}
       - mysql -u{{ dbuser }} -p{{ dbpassword }} -e 'insert into ttbl (Data) VALUES ("tdata");' {{ dbname }}

  when: status == "LOAD"

- block:

   - name: "[Data-Persistence]: Kill the application pod"
     shell: >
       kubectl delete pod {{ pod_name }} -n {{ ns }}
     args:
       executable: /bin/bash

   - name: "[Data-Persistence]: Verify if the applicaion pod is deleted"
     shell: >
       kubectl get pods -n {{ ns }}
     args:
       executable: /bin/bash
     register: podstatus
     until: '"{{ pod_name }}" not in podstatus.stdout'
     retries: 2
     delay: 90

   - name: "[Data-Persistence]: Obtain the newly created pod name for applicaion"
     shell: >
       kubectl get pods -n {{ ns }} -l {{ label }} -o jsonpath='{.items[].metadata.name}'
     args:
       executable: /bin/bash
     register: newpod_name

   - name: "[Data-Persistence]: Checking application pod is in running state"
     shell: kubectl get pods -n {{ ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ newpod_name.stdout }}")].status.phase}'
     register: result
     until: "((result.stdout.split()|unique)|length) == 1 and 'Running' in result.stdout"
     delay: 2
     retries: 90

   - name: "[Data-Persistence]: Checking application pod is in running state"
     shell: >
        kubectl get pods -n {{ ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ newpod_name.stdout }}")].status.containerStatuses[].state}' | grep running
     args:
       executable: /bin/bash
     register: containerStatus
     until: "'running' in containerStatus.stdout"
     delay: 2
     retries: 90

   - name: "[Data-Persistence]: Checking for the Corrupted tables"
     shell: >
       kubectl exec {{ newpod_name.stdout }} -n {{ ns }}
       -- mysqlcheck -c {{ dbname }} -u{{ dbuser }} -p{{ dbpassword }}
     args:
       executable: /bin/bash
     register: status 
     failed_when: "'OK' not in status.stdout"

   - name: "[Data-Persistence]: Verify the data persistence of mysql"
     shell: >
       kubectl exec {{ newpod_name.stdout }} -n {{ ns }}
       -- mysql -u{{ dbuser }} -p{{ dbpassword }} -e 'select * from ttbl' {{ dbname }};
     args:
       executable: /bin/bash
     register: result 
     failed_when: "'tdata' not in result.stdout"   

  when: status == "VERIFY"

- block:

   - name: "[Data-Persistence]: Delete/drop MySQL database" 
     shell: > 
       kubectl exec {{ pod_name }} -n {{ ns }}
       -- mysql -u{{ dbuser }} -p{{ dbpassword }} -e 'drop database {{ dbname }}'; 
     args:
       executable: /bin/bash
     register: status 

   - name: "[Data-Persistence]: Verify successful db delete"
     shell: > 
       kubectl exec {{ pod_name }} -n {{ ns }}
       -- mysql -u{{ dbuser }} -p{{ dbpassword }} -e 'show databases';
     args:
       executable: /bin/bash
     register: result 
     failed_when: "dbname in result.stdout"   

  when: status == "DELETE"