- hosts: localhost
  connection: local

  vars:
    c_experiment: "openebs-nfs-provisioner-kill"
    nfs_provisioner_ns: "{{ lookup('env', 'NFS_PROVISIONER_NAMESPACE')}}"
    nfs_provisioner_label: "{{ lookup('env', 'NFS_PROVISIONER_LABEL')}}"
    nfs_pvc: "{{ lookup('env', 'NFS_PVC') }}"
    nfs_svc: "{{ lookup('env', 'NFS_SVC') }}"
    a_label: "{{ lookup('env','APP_LABEL') }}"
    a_ns: "{{ lookup('env','APP_NAMESPACE') }}"
    c_lib: "{{ lookup('env', 'LIB') }}"
    c_container: "{{ lookup('env','TARGET_CONTAINER') }}"
    lib_image: "{{ lookup('env','LIB_IMAGE') }}"
    c_engine: "{{ lookup('env','CHAOSENGINE') }}"
    external_app_check: "{{ lookup('env', 'EXTERNAL_APP_CHECK') }}"
    chaos_pod_name: "{{ lookup('env','POD_NAME') }}"
    c_interval: "{{ lookup('env', 'CHAOS_INTERVAL')}}"
    c_ns: "{{ lookup('env','CHAOS_NAMESPACE') }}"
    c_duration: "{{ lookup('env','TOTAL_CHAOS_DURATION') }}"
    chaos_uid: "{{ lookup('env','CHAOS_UID') }}"
    
  vars_files:
    - /mnt/parameters.yml

  tasks:

    - block:
      - include: openebs_nfs_provisioner_kill_prerequisites.yml

      - include_vars:
          file: /tmp/chaosutil.yml

      ## GENERATE EXP RESULT NAME
      - name: Construct chaos result name (experiment_name)
        set_fact:
          c_result: "{{ lookup('env','CHAOSENGINE') }}-{{ c_experiment }}"
        when: "c_engine is defined and c_engine != ''"

      ## RECORD START-OF-EXPERIMENT IN CHAOS RESULT CR
      - include_tasks: /utils/runtime/update_chaos_result_resource.yml
        vars:
          status: 'SOT'
          namespace: "{{ c_ns }}"

      ## DISPLAY APP INFORMATION 
      - name: Display the app information passed via the test job
        debug: 
          msg: 
            - "The application info is as follows:"
            - "NFS Provisioner Namespace : {{ nfs_provisioner_ns }}"
            - "NFS Provisioner LABEL     : {{ nfs_provisioner_label }}"
            - "NFS Provisioner PVC       : {{ nfs_pvc }}"
            - "NFS Service               : {{ nfs_svc }}"

      - block:
          - name: Generate a external app run id
            shell: echo $(mktemp) | cut -d '.' -f 2 
            register: external_app_rand_string   

          - set_fact:
              external_app_run_id: "{{ external_app_rand_string.stdout | lower }}"

          - name: Deploying and checking liveness of external application using NFS
            include_tasks: "/utils/apps/nfs/external_liveness_check.yml"
            vars:
              app_ns: "{{ a_ns }}"
              app_label: "{{ a_label }}"
              state: "START"
              run_id: "{{ external_app_run_id }}"

        when: "external_app_check == 'true'"
  
      ## PRE-CHAOS APPLICATION LIVENESS CHECK
      - name: Generate a nfs exporter liveness check run id
        shell: echo $(mktemp) | cut -d '.' -f 2 
        register: user_app_rand_string   

      - set_fact:
          user_app_run_id: "{{ user_app_rand_string.stdout | lower }}"

      - name: (Pre) Verify that the AUT (Application Under Test) is running 
        include_tasks: "/utils/common/status_app_pod.yml"
        vars:
          app_ns: "{{ a_ns }}"
          app_label: "{{ a_label }}"      
          delay: 2
          retries: 90

      - name: (Pre) Checking the user's pod volume is using NFS 
        include_tasks: "/utils/apps/nfs/nfs_mount_check.yml"
        vars:
          app_ns: "{{ a_ns }}"
          app_label: "{{ a_label }}"
          run_id: "{{ user_app_run_id }}"
          state: "START"

      ## RECORD EVENT FOR PRE-CHAOS CHECK
      - include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
        vars:
          stage: "PreChaosCheck"
          exp_pod_name: "{{ chaos_pod_name }}"
          engine_ns: "{{ c_ns }}"
          message: "OpenEBS NFS are Running successfully"
        when: "c_engine is defined and c_engine != ''"

      ## Injecting the NFS kill chaos
      - name: Injecting the NFS provisioner container with {{ c_lib }} chaos LIB
        include_tasks: "{{ c_util }}"
        vars:
          namespace: "{{ nfs_provisioner_ns }}"
          app_container: "{{ c_container }}"
          a_label: "{{ nfs_provisioner_label }}"

      ## POST-CHAOS APPLICATION LIVENESS CHECK
      - name: (Post) Verify that the AUT (Application Under Test) is running 
        include_tasks: "/utils/common/status_app_pod.yml"
        vars:
          app_ns: "{{ a_ns }}"
          app_label: "{{ a_label }}"
          delay: 2
          retries: 90

      - name: (Post) Re-Checking the user's pod volume is using NFS 
        include_tasks: "/utils/apps/nfs/nfs_mount_check.yml"
        vars:
          app_ns: "{{ a_ns }}"
          app_label: "{{ a_label }}"
          run_id: "{{ user_app_run_id }}"
          state: "END"

      - block:
        - name: Deploying and checking liveness of external application using NFS
          include_tasks: "/utils/apps/nfs/external_liveness_check.yml"
          vars:
            app_ns: "{{ a_ns }}"
            app_label: "{{ a_label }}"
            state: "END"
            run_id: "{{ external_app_run_id }}"
        when: "external_app_check == 'true'"

      ## RECORD EVENT FOR POST-CHAOS CHECK
      - include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
        vars:
          stage: "PostChaosCheck"
          exp_pod_name: "{{ chaos_pod_name }}"
          engine_ns: "{{ c_ns }}"
          message: "OpenEBS NFS are Running successfully"
        when: "c_engine is defined and c_engine != ''"
      
      - set_fact:
          flag: "Pass"
    
      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 
        
        ## Getting failure step from experiment-pod 
        - include_tasks: /utils/runtime/getting_failure_step.yml

         ## RECORD END-OF-TEST IN CHAOS RESULT CR
        - include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: "EOT"
            namespace: "{{ c_ns }}"
