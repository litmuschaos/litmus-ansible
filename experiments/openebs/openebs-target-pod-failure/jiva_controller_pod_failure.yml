---
- name: "[Prepare]: Pick the jiva controller pod"
  include_tasks: /utils/apps/openebs/fetch_jiva_controller_pod.yml

- name: "[Prepare]: Record the jiva controller deployment and container name"
  set_fact:  
    jiva_controller_deploy: "{{ pv.stdout }}-{{ jiva_controller_pod_suffix }}"
    jiva_controller_name: "{{ pv.stdout }}-{{ jiva_controller_pod_suffix }}-{{ jiva_controller_container_suffix }}"

- name: "[Prepare]: Get the resourceVersion of the target deploy before fault injection"
  shell: >
    kubectl get deployment {{ jiva_controller_deploy }} -n {{ a_ns }} 
    -o=custom-columns=NAME:".metadata.resourceVersion" --no-headers
  args:
    executable: /bin/bash
  register: rv_bef

- name: "[Prepare]: Getting the name of controller svc"
  shell: >
    kubectl get svc -l {{ jiva_controller_svc_label }}
    -n {{ a_ns }} -o=jsonpath='{.items[0].spec.clusterIP}'
  args:
    executable: /bin/bash
  register: controller_svc
  failed_when: controller_svc.stdout == ""

- name: "[Install]: Install jq package inside a controller container"
  shell: >
    kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ a_ns }} -c {{ jiva_controller_name }} 
    -- bash -c "apt-get update && apt-get install -y jq"
  args:
    executable: /bin/bash

- name: "[Prepare]: Getting the Replicastatus before killing controller"
  shell: >
   kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ a_ns }} 
   -c {{ jiva_controller_name }} curl http://"{{controller_svc.stdout}}":9501/v1/replicas | jq -r '.data[].mode'
  args:
    executable: /bin/bash
  register: rstatus_before 

# including litmus chaoslib -> kill-random-pod
- name: "[Inject]: Including the random pod delete chaoslib"
  include_tasks: /chaoslib/litmus/pod_delete/kill_random_pod.yml
  vars:
    app_ns: "{{ a_ns }}"
    app_pod_name: "{{ jiva_controller_pod.stdout }}"

- name: "[Verification]: Get jiva controller pod belonging to the PV"
  shell: >
    kubectl get pods --no-headers -l {{ jiva_controller_pod_label }} -n {{ a_ns }}
    -o jsonpath="{.items[?(@.metadata.labels.openebs\\.io/persistent-volume==\"{{pv.stdout}}\")].metadata.name}"
  args:
    executable: /bin/bash
  register: jctrl_pod_after

- name: "[Install]: Install jq package inside a controller container"
  shell: >
    kubectl exec -it {{ jctrl_pod_after.stdout }} -n {{ a_ns }} -c {{ jiva_controller_name }}
    -- bash -c "apt-get update && apt-get install -y jq"
  args:
    executable: /bin/bash

- name: "[Verification]: Getting the Replicastatus after killing the controller"
  shell: >
   kubectl exec -it {{ jctrl_pod_after.stdout }} -n {{ a_ns }}
   -c {{ jiva_controller_name }} curl http://"{{controller_svc.stdout}}":9501/v1/replicas | jq -r '.data[].mode'
  args:
    executable: /bin/bash
  register: rstatus_after
  until: "rstatus_after.stdout_lines == rstatus_before.stdout_lines and 'RW' in rstatus_after.stdout"
  retries: 2
  delay: 90

- name: "[Verification]: Get the resourceVersion of the controller deploy after fault injection"
  shell: >
    kubectl get deployment {{ jiva_controller_deploy }} -n {{ a_ns }}
    -o=custom-columns=NAME:".metadata.resourceVersion" --no-headers 
  args:
    executable: /bin/bash
  register: rv_aft

- name: "[Verification]: Compare resourceVersions of controller deployment before/after"
  debug:
    msg: "Verified target pods were restarted by fault injection"
  failed_when: "rv_bef.stdout | int == rv_aft.stdout | int"