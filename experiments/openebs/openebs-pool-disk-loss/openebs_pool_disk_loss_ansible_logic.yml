- hosts: localhost
  connection: local

  vars:
    a_label: "{{ lookup('env','APP_LABEL') }}"
    a_ns: "{{ lookup('env','APP_NAMESPACE') }}"
    a_pvc: "{{ lookup('env','APP_PVC') }}"
    c_duration: "{{ lookup('env','TOTAL_CHAOS_DURATION') }}"
    c_experiment: "openebs-pool-disk-loss"
    ramp_time: "{{ lookup('env','RAMP_TIME') }}"
    data_persistence: "{{ lookup('env','DATA_PERSISTENCE') }}"
    liveness_label: "{{ lookup('env','LIVENESS_APP_LABEL') }}"
    liveness_namespace: "{{ lookup('env','LIVENESS_APP_NAMESPACE') }}"
    auxiliary_appinfo: "{{ lookup('env','AUXILIARY_APPINFO') }}"
    c_engine: "{{ lookup('env','CHAOSENGINE') }}"
    openebs_ns: "{{ lookup('env','OPENEBS_NAMESPACE') }}"
    chaos_uid: "{{ lookup('env','CHAOS_UID') }}"
    chaos_pod_name: "{{ lookup('env','POD_NAME') }}"
    c_ns: "{{ lookup('env','CHAOS_NAMESPACE') }}"

  vars_files:
    - /mnt/parameters.yml
    - /experiments/openebs/openebs_components.yml
    - platform_vars.yml
  
  tasks:
    - block:

      - include_tasks: /utils/runtime/create_testname.yml  

      - include_tasks: openebs_pool_disk_loss_ansible_prerequisites.yml

      # GENERATE EXPERIMENT RESULT NAME
      - name: "[PreReq]: Constructing the chaos result name"
        set_fact:
          c_result: "{{ c_engine }}-{{ c_experiment }}"
        when: "c_engine is defined and c_engine != ''"

      - name: "[PreReq]: Updating the chaos result of {{ c_experiment }} experiment (SOT)"
        include_tasks: /utils/runtime/update_chaos_result_resource.yml
        vars:
          status: 'SOT'
          namespace: "{{ c_ns }}"

      # DISPLAY APP INFORMATION
      - name: Display the app information passed via the test job
        debug:
          msg:
            - "The application info is as follows:"
            - "Namespace    : {{ a_ns }}"
            - "Label        : {{ a_label }}"
            - "PVC          : {{ a_pvc }}"

      # Gcloud authentication
      - name: "[Authentication]: Gcloud authentication"
        include_tasks: "/utils/cloud/gcp/gcloud_configure.yml"
        when: "cloud_platform == 'GKE'"

      # AWS authentication
      - name: "[Authentication]: Gcloud authentication"
        include_tasks: "/utils/cloud/aws/aws_configure.yml"
        when: "cloud_platform == 'AWS'"
        
      ## PRE-CHAOS DISK STATUS CHECK
      - name: "[Status]: Verify that the disk is connected to node (pre-chaos)"
        include_tasks: "/utils/cloud/gcp/status_disk.yml"
        when: "cloud_platform == 'GKE'"

      - name: "[Status]: Verify that the disk is connected to node (pre-chaos)"
        include_tasks: "/utils/cloud/aws/status_disk.yml"
        when: "cloud_platform == 'AWS'"

      # Checking disk is attached to node
      - debug: 
          msg: "specified disk is attached to node"   
        when: "inuse is defined and inuse == true"

      - fail:
          msg: "specified disk is not attached to node"
        when: "inuse is defined and inuse == false"
        
      - name: "[Status]: Verify that the AUT (Application Under Test) is running (pre-chaos)"
        include_tasks: "/utils/common/status_app_pod.yml"
        vars:
          app_ns: "{{ a_ns }}"
          app_label: "{{ a_label }}"      
          delay: 2
          retries: 90

      # Auxiliary application health check status
      - block:

        - name: Record auxiliary appinfo 
          set_fact:
            auxiliary_appinfo_list: "{{ auxiliary_appinfo.split(',') }}"

        - name: "[Status]: Verify that the Auxiliary Applications are running (pre-chaos)"
          include: /utils/common/status_app_pod.yml
          vars:
            app_ns: "{{ item.split(':')[0] }}"
            app_label: "{{ item.split(':')[1] }}"
            delay: 2
            retries: 90
          with_items:
            - "{{ auxiliary_appinfo_list }}" 

        when: auxiliary_appinfo is defined and auxiliary_appinfo != ''

      ## RECORD EVENT FOR PRE-CHAOS CHECK
      - name: "[Event]: Generating an Event for PreChaosCheck"
        include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
        vars:
          stage: "PreChaosCheck"
          exp_pod_name: "{{ chaos_pod_name }}"
          engine_ns: "{{ c_ns }}"
          message: "AUT is Running successfully"
        when: "c_engine is defined and c_engine != ''"

      - name: "[Status]: Verify that the health status of cstor pool (pre-chaos)"
        include: /utils/apps/openebs/cstor_pool_health_status.yml
        vars:
          delay: 2
          retries: 90

      - name: "[Data-Persistence]: Getting the name of application pod"
        shell: >
          kubectl get pods -n {{ a_ns }} -l {{ a_label }} --no-headers -o=custom-columns=NAME:".metadata.name"
        args:
          executable: /bin/bash
        register: pod_app_name

      - name: "[Data-Persistence]: Create some load data to check the persistency"
        include: "{{ consistencyutil }}"
        vars:
          status: 'LOAD'
          ns: "{{ a_ns }}"
          pod_name: "{{ pod_app_name.stdout }}"
        when: data_persistence | length > 0
          
      # INJECTING CHAOS 
      - name: Injecting the chaos
        include_tasks: "{{ c_util }}"

      # POST CHAOS CHECKS
      - name: "[Status]: Verify that the disk is connected to node (post-chaos)"
        include_tasks: "/utils/cloud/gcp/status_disk.yml"
        when: "cloud_platform == 'GKE'"
      
      - name: "[Status]: Verify that the disk is connected to node (post-chaos)"
        include_tasks: "/utils/cloud/aws/status_disk.yml"
        when: "cloud_platform == 'AWS'"
        
      # Checking disk is attached to node
      - debug: 
          msg: "specified disk is attached to node"   
        when: "inuse is defined and inuse == true"

      - fail:
          msg: "specified disk is not re-attached to node"
        when: "inuse is defined and inuse == false"
      
      - name: "[Status]: Verify that the AUT (Application Under Test) is running (post-chaos)"
        include_tasks: "/utils/common/status_app_pod.yml"
        vars:
          app_ns: "{{ a_ns }}"
          app_label: "{{ a_label }}"      
          delay: 2
          retries: 90

      - block:

          - name: Record auxiliary appinfo 
            set_fact:
              auxiliary_appinfo_list: "{{ auxiliary_appinfo.split(',') }}"

          - name: "[Status]: Verify that the Auxiliary Applications are running (post-chaos)"
            include: /utils/common/status_app_pod.yml
            vars:
              app_ns: "{{ item.split(':')[0] }}"
              app_label: "{{ item.split(':')[1] }}"
              delay: 2
              retries: 90
            with_items:
              - "{{ auxiliary_appinfo_list }}" 

        when: auxiliary_appinfo is defined and auxiliary_appinfo != ''
      
      ## RECORD EVENT FOR POST-CHAOS CHECK
      - name: "[Event]: Generating an Event for PostChaosCheck"
        include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
        vars:
          stage: "PostChaosCheck"
          exp_pod_name: "{{ chaos_pod_name }}"
          engine_ns: "{{ c_ns }}"
          message: "Disk has been reattached and AUT is Running successfully"
        when: "c_engine is defined and c_engine != ''"
    
      - name: "[Status]: Verify that the health status of cstor pool (post-chaos)"
        include: /utils/apps/openebs/cstor_pool_health_status.yml
        vars:
          delay: 2
          retries: 90

      - name: "[Data-Persistence]: Verify application data persistence"
        include: "{{ consistencyutil }}"
        vars:
          status: 'VERIFY'
          ns: "{{ a_ns }}"
          label: "{{ a_label }}"
          pod_name: "{{ pod_app_name.stdout }}"
        when: data_persistence | length > 0   

      - set_fact:
          flag: "Pass"

      - name: "[Result]: Getting the final result of {{ c_experiment }} experiment"
        debug:
          msg: "{{ c_experiment }} experiment has been {{ flag }}ed"

      rescue:

        - set_fact:
            flag: "Fail"

        - name: "[Result]: Getting the final result of {{ c_experiment }} experiment"
          debug:
            msg: "{{ c_experiment }} experiment has been {{ flag }}ed"

      always:
        ## Getting failure step from experiment-pod
        - include_tasks: /utils/runtime/getting_failure_step.yml  

        ## RECORD END-OF-TEST IN CHAOS RESULT CR
        - name: "[The End]: Updating the chaos result of {{ c_experiment }} experiment (EOT)"
          include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'EOT'
            namespace: "{{ c_ns }}"
