---
- name: "[Prepare]: Pick the jiva controller pod"
  include_tasks: /utils/apps/openebs/fetch_jiva_controller_pod.yml

- name: "[Prepare]: Record jiva controller container name"
  set_fact:
    ctrl_container: "{{ pv.stdout }}-{{ jiva_controller_pod_suffix }}-{{ jiva_controller_container_suffix }}"

- name: "[Prepare]: Getting the restartCount of {{ ctrl_container }} container"
  shell: >
    kubectl get pods {{ jiva_controller_pod.stdout }} -n {{ a_ns }}
    -o=jsonpath='{.status.containerStatuses[?(@.name==''"{{ctrl_container}}"'')].restartCount}'
  args:
    executable: /bin/bash
  register: restartCount_before

# including pumba chaoslib - pod-failure-by-sigkill
- name: "[Include]: Including the pumba chaoslib for container kill"
  include_tasks: /chaoslib/pumba/pod_failure_by_sigkill.yml
  vars:
    app_pod: "{{ jiva_controller_pod.stdout }}"
    namespace: "{{ a_ns }}"
    app_container: "{{ ctrl_container }}"
  when: cri == 'docker'

# including containerd chaoslib -> crictl-chaos
- name: "[Include]: Including the containerd chaoslib for container kill"
  include_tasks: /chaoslib/litmus/container_kill/crictl-chaos.yml
  vars:
    app_pod: "{{ jiva_controller_pod.stdout }}"
    namespace: "{{ a_ns }}"
    app_container: "{{ ctrl_container }}"
  when: cri == 'containerd'

- name: "[Status]: Check the running status of {{ jiva_controller_pod.stdout }} pod"
  shell: >
    kubectl get pod {{ jiva_controller_pod.stdout }} -n {{ a_ns }} --no-headers
    -o custom-columns=:.status.phase    
  args:
    executable: /bin/bash
  register: result
  until: "result.stdout == 'Running'"
  delay: 2
  retries: 90

- name: "[Status]: Check the container status of controller pod"
  shell: >
    kubectl get pod {{ jiva_controller_pod.stdout }} -n {{ a_ns }}
    -o=jsonpath='{range .status.containerStatuses[*]}{.state}{"\n"}{end}' |
    grep -w running | wc -l
  args:
    executable: /bin/bash
  register: runningStatusCount
  until: "runningStatusCount.stdout == \"2\""
  delay: 2
  retries: 90

- name: "[Verification]: Getting the restartCount of {{ ctrl_container }} container"
  shell: >
    kubectl get pods {{ jiva_controller_pod.stdout }} -n {{ a_ns }}
    -o=jsonpath='{.status.containerStatuses[?(@.name==''"{{ctrl_container}}"'')].restartCount}'
  args: 
    executable: /bin/bash
  register: restartCount_after

- name: "[Verification]: Compare the restartCounts of {{ ctrl_container }} container Before/After"
  debug:
    msg:
      - "Verified containers restartcounts after fault injection"
      - "Before: {{ restartCount_before.stdout }}"
      - "After: {{ restartCount_after.stdout }}"
  failed_when: "{{ restartCount_after.stdout|int }} <= {{ restartCount_before.stdout|int }}"