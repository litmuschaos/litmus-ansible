- name: "[Prepare]: Randomly select the pool deployment from cvr"
  shell: >
    kubectl get cvr -n {{ openebs_ns }}
    -l openebs.io/persistent-volume={{ pv.stdout }} --no-headers
    -o=jsonpath='{range .items[*]}{.metadata.labels.cstorpool\.openebs\.io\/name}{"\n"}{end}' |
    shuf -n1 | awk '{print $1}'
  args:
    executable: /bin/bash
  register: pool_deployment

- name: "[Prepare]: Get the resourceVersion of pool deployment"
  shell: >
    kubectl get deployment {{ pool_deployment.stdout }}
    -n {{ openebs_ns }} -o=jsonpath='{.metadata.resourceVersion}'
  args:
    executable: /bin/bash
  register: pool_deployment_revisionSource_before

- name: "[Prepare]: Get the name of pool pod"
  shell: >
    kubectl get pods -n {{ openebs_ns }} |
    grep {{ pool_deployment.stdout }} | grep -w "Running" | awk '{print $1}'
  args:
    executable: /bin/bash
  register: cstor_pool_pod

# including chaoslib kill-random-pod
- name: "[Inject]: Delete the cstor pool pod for reschedule"
  include_tasks: /chaoslib/litmus/pod_delete/kill_random_pod.yml
  vars:
    app_ns: "{{ openebs_ns }}"
    app_pod_name: "{{ cstor_pool_pod.stdout }}"

- name: "[Status]: Check for pool pod in running state"
  shell: >
    kubectl get pods -n {{ openebs_ns }} |
    grep {{ pool_deployment.stdout }} | grep -v {{ cstor_pool_pod.stdout }} |
    grep -w "Running" | wc -l
  args:
    executable: /bin/bash
  register: cstor_pool_pod_cnt
  until: "cstor_pool_pod_cnt.stdout == \"1\""
  delay: 2
  retries: 90

- name: "[Verification]: Get resourceVersion after pod delete"
  shell: >
    kubectl get deployment {{ pool_deployment.stdout }}
    -n {{ openebs_ns }} -o=jsonpath='{.metadata.resourceVersion}'
  args:
    executable: /bin/bash
  register: pool_deployment_revisionSource_after

- name: "[Verification] Compare the resourceVersions of pool pod before & after"
  debug:
    msg:
      - "Verified pool pods were restarted by fault injection"
      - "Before: {{ pool_deployment_revisionSource_before.stdout }}"
      - "After: {{ pool_deployment_revisionSource_after.stdout }}"
  failed_when: "pool_deployment_revisionSource_before.stdout|int == pool_deployment_revisionSource_after.stdout|int"