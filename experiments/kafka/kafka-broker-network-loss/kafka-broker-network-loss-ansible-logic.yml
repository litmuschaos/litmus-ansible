---
- hosts: localhost
  connection: local

  vars:
    c_experiment: "kafka-broker-network-loss"
    c_duration: "{{ lookup('env','TOTAL_CHAOS_DURATION') }}"
    c_container: "{{ lookup('env','TARGET_CONTAINER') }}"
    n_packet_loss: "{{ lookup('env','NETWORK_PACKET_LOSS_PERCENTAGE') }}"
    n_interface: "{{ lookup('env','NETWORK_INTERFACE') }}"
    c_lib: "{{ lookup('env','LIB') }}"
    lib_image: "{{ lookup('env','LIB_IMAGE') }}"
    kafka_instance: "{{ lookup('env','KAFKA_INSTANCE_NAME') }}"
    kafka_ns: "{{ lookup('env','KAFKA_NAMESPACE') }}"
    kafka_label: "{{ lookup('env','KAFKA_LABEL') }}"
    kafka_kind: "{{ lookup('env','KAFKA_KIND') }}"
    kafka_broker: "{{ lookup('env','KAFKA_BROKER') }}"
    kafka_stream: "{{ lookup('env','KAFKA_LIVENESS_STREAM') }}" 
    kafka_liveness_image: "{{ lookup('env','KAFKA_LIVENESS_IMAGE') }}" 
    kafka_consumer_timeout: "{{ lookup('env','KAFKA_CONSUMER_TIMEOUT') }}" 
    kafka_service: "{{ lookup('env','KAFKA_SERVICE') }}"
    kafka_port: "{{ lookup('env','KAFKA_PORT') }}" 
    kafka_replication_factor: "{{ lookup('env','KAFKA_REPLICATION_FACTOR') }}" 
    zk_ns: "{{ lookup('env','ZOOKEEPER_NAMESPACE') }}"
    zk_label: "{{ lookup('env','ZOOKEEPER_LABEL') }}"
    zk_service: "{{ lookup('env','ZOOKEEPER_SERVICE') }}"
    zk_port: "{{ lookup('env','ZOOKEEPER_PORT') }}" 
    chaos_uid: "{{ lookup('env','CHAOS_UID') }}"
    c_engine: "{{ lookup('env','CHAOSENGINE') }}"
    chaos_pod_name: "{{ lookup('env','POD_NAME') }}"
    c_ns: "{{ lookup('env','CHAOS_NAMESPACE') }}"

  tasks:
    - block:

        - include: kafka-broker-network-loss-ansible-prerequisites.yml 
      
        - name: "[PreReq]: Including the chaos util for the {{ c_experiment }} experiment"
          include_vars:
            file: chaosutil.yml

        ## GENERATE EXP RESULT NAME
        - name: "[PreReq]: Constructing the chaos result name"
          set_fact:
            c_result: "{{ c_engine }}-{{ c_experiment }}"
          when: "c_engine is defined and c_engine != ''"  

        ## RECORD START-OF-EXPERIMENT IN LITMUSCHAOS RESULT CR
        - name: "[PreReq]: Updating the chaos result of {{ c_experiment }} experiment (SOT)"
          include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'SOT'
            namespace: "{{ c_ns }}"

         ## DISPLAY APP INFORMATION 
        - name: "[Info]: Display the application information passed via the test job"
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Kafka Namespace    : {{ kafka_ns }}"
              - "Kafka Label        : {{ kafka_label }}"

        ## PRE-CHAOS APPLICATION LIVENESS CHECK

        - name: "[Status]: Verify that the Kafka cluster is healthy(pre-chaos)"
          include_tasks: "/utils/apps/kafka/kafka_cluster_health.yml"
          vars:     
            delay: 2
            retries: 90

         ## RECORD EVENT FOR PRE-CHAOS CHECK
        - name: "[Event]: Generating an Event for PreChaosCheck"
          include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
          vars:
            stage: "PreChaosCheck"
            exp_pod_name: "{{ chaos_pod_name }}"
            engine_ns: "{{ c_ns }}"
            message: "AUT is Running successfully"
          when: "c_engine is defined and c_engine != ''"

        ## SETUP KAFKA CHAOS INFRA AND DERIVE BROKERS UNDER TEST
       
        - include_tasks: "{{ kafka_broker_util }}" 

        ## FAULT INJECTION 

        - include_tasks: "{{ c_util }}"
          vars:
            a_ns: "{{ kafka_ns }}"
            a_label: "{{ kafka_label }}"
            app_ns: "{{ kafka_ns }}"
            
            # derived from the 'kafka_broker_util' task
            app_pod: "{{ kafka_broker }}" 
          
        ## POST-CHAOS APPLICATION LIVENESS CHECK
        
        - name: "[Status]: Verify that the Kafka cluster is healthy(post-chaos)"
          include_tasks: "/utils/apps/kafka/kafka_cluster_health.yml"
          vars:     
            delay: 2
            retries: 90

         ## RECORD EVENT FOR POST-CHAOS CHECK
        - name: "[Event]: Generating an Event for PostChaosCheck"
          include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
          vars:
            stage: "PostChaosCheck"
            exp_pod_name: "{{ chaos_pod_name }}"
            engine_ns: "{{ c_ns }}"
            message: "AUT is Running successfully"
          when: "c_engine is defined and c_engine != ''"

        ## CHECK FOR KAFKA LIVENESS & CLEANUP
        - block: 

            - name: "[Status]: Verify that the Kafka liveness pod (pub-sub) is uninterrupted"
              include_tasks: "/utils/common/status_app_pod.yml"
              vars: 
                app_ns: "{{ kafka_ns }}"
                app_label: "name=kafka-liveness" 
                delay: 2
                retries: 90

            - include_tasks: "/utils/apps/kafka/kafka_liveness_cleanup.yml"

          when: kafka_stream is defined and kafka_stream == 'enabled'

        - set_fact:
            flag: "Pass"

        - name: "[Result]: Getting the final result of {{ c_experiment }} experiment"
          debug:
            msg: "{{ c_experiment }} experiment has been {{ flag }}ed"


      rescue: 
        - set_fact: 
            flag: "Fail"

        - name: "[Result]: Getting the final result of {{ c_experiment }} experiment"
          debug:
            msg: "{{ c_experiment }} experiment has been {{ flag }}ed"

        - name: "[CleanUP]: Cleanup kafka liveness pods if present"
          include_tasks: "/utils/apps/kafka/kafka_liveness_cleanup.yml"
          ignore_errors: true

      always: 

        ## Getting failure step from experiment-pod
        - include_tasks: /utils/runtime/getting_failure_step.yml  
 
        ## RECORD END-OF-TEST IN LITMUSCHAOS RESULT CR
        - name: "[The End]: Updating the chaos result of {{ c_experiment }} experiment (EOT)"
          include_tasks: /utils/runtime/update_chaos_result_resource.yml
          vars:
            status: 'EOT'
            namespace: "{{ c_ns }}"