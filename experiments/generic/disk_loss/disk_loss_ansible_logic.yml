- hosts: localhost
  connection: local

  vars:
    a_check: "{{ lookup('env', 'APP_CHECK') }}"
    a_label: "{{ lookup('env','APP_LABEL') }}"
    a_ns: "{{ lookup('env','APP_NAMESPACE') }}"
    c_duration: "{{ lookup('env','TOTAL_CHAOS_DURATION') }}"
    ramp_time: "{{ lookup('env','RAMP_TIME') }}"
    c_experiment: disk-loss
    cloud_platform: "{{ lookup('env','CLOUD_PLATFORM') }}"
    disk_name: "{{ lookup('env','DISK_NAME') }}"
    device_name: "{{ lookup('env', 'DEVICE_NAME') }}"
    node_name: "{{ lookup('env','NODE_NAME') }}"
    project_id: "{{ lookup('env','PROJECT_ID') }}"
    zone_name: "{{ lookup('env','ZONE_NAME') }}"
    auxiliary_appinfo: "{{ lookup('env','AUXILIARY_APPINFO') }}"
    c_engine: "{{ lookup('env','CHAOSENGINE') }}"
    chaos_pod_name: "{{ lookup('env','POD_NAME') }}"
    chaos_uid: "{{ lookup('env','CHAOS_UID') }}"
    c_lib: "{{ lookup('env','LIB') }}"
    c_ns: "{{ lookup('env','CHAOS_NAMESPACE') }}"

  tasks:

    - block:
        - include: disk_loss_ansible_prerequisites.yml

        - name: "[PreReq]: Including the chaos util for the {{ c_experiment }} experiment"
          include_vars:
            file: /tmp/chaosutil.yml 

        ## GENERATE EXP RESULT NAME
        - name: "[PreReq]: Constructing the chaos result name"
          set_fact:
            c_result: "{{ c_engine }}-{{ c_experiment }}"
          when: "c_engine is defined and c_engine != ''"

        # RECORD START-OF-EXPERIMENT IN LITMUSCHAOS RESULT CR
        - name: "[PreReq]: Updating the chaos result of {{ c_experiment }} experiment (SOT)"
          include_tasks: "/utils/runtime/update_chaos_result_resource.yml"
          vars:
            status: 'SOT'
            namespace: "{{ c_ns }}"

        ## DISPLAY APP INFORMATION 
        - name: "[Info]: Display the application information passed via the test job"
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ a_ns }}"
              - "Label        : {{ a_label }}"
              - "Ramp Time    : {{ ramp_time }}"  

        ## PRE-CHAOS APPLICATION STATUS CHECK
        - name: "[Status]: Verify that the AUT (Application Under Test) is running (pre-chaos)"
          include_tasks: "/utils/common/status_app_pod.yml"
          vars:
            app_ns: "{{ a_ns }}"
            app_label: "{{ a_label }}" 
            delay: 2
            retries: 90
          when: "a_check == 'true'"

        # Auxiliary application health check status
        - block:

          - name: Record auxiliary appinfo 
            set_fact:
              auxiliary_appinfo_list: "{{ auxiliary_appinfo.split(',') }}"

          - name: "[Status]: Verify that the Auxiliary Applications are running (pre-chaos)"
            include: /utils/common/status_app_pod.yml
            vars:
              app_ns: "{{ item.split(':')[0] }}"
              app_label: "{{ item.split(':')[1] }}"
              delay: 2
              retries: 90
            with_items:
              - "{{ auxiliary_appinfo_list }}" 

          when: auxiliary_appinfo is defined and auxiliary_appinfo != ''

        ## RECORD EVENT FOR PRE-CHAOS CHECK
        - name: "[Event]: Generating an Event for PreChaosCheck"
          include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
          vars:
            stage: "PreChaosCheck"
            exp_pod_name: "{{ chaos_pod_name }}"
            engine_ns: "{{ c_ns }}"
            message: "AUT is Running successfully"
          when: "c_engine is defined and c_engine != ''"

        # Gcloud authentication
        - name: "[Authentication]: Gcloud authentication"
          include_tasks: "/utils/cloud/gcp/gcloud_configure.yml"
          when: "cloud_platform == 'GKE'"
        
        # AWS authentication
        - name: "[Authentication]: AWS authentication"
          include_tasks: "/utils/cloud/aws/aws_configure.yml"
          when: "cloud_platform == 'AWS'"

        ## PRE-CHAOS DISK STATUS CHECK
        - name: "[Status]: Verify that the disk is connected to node (pre-chaos)"
          include_tasks: "/utils/cloud/gcp/status_disk.yml"
          when: "cloud_platform == 'GKE'"

        - name: "[Status]: Verify that the disk is connected to node (pre-chaos)"
          include_tasks: "/utils/cloud/aws/status_disk.yml"
          when: "cloud_platform == 'AWS'"

        # Checking disk is attached to node
        - debug: 
            msg: "specified disk is attached to node"   
          when: "inuse is defined and inuse == true"

        - fail:
            msg: "specified disk not attached to node"
          when: "inuse is defined and inuse == false"

         ## INJECTING CHAOS 
        - name: "[Prepare]: Including the disk-loss chaoslib"
          include_tasks: "{{ c_util }}"
            
        # POST-CHAOS APPLICATION STATUS CHECK
        - name: "[Status]: Verify that the AUT (Application Under Test) is running (post-chaos)"
          include_tasks: "/utils/common/status_app_pod.yml"
          vars:
            app_ns: "{{ a_ns }}"
            app_label: "{{ a_label }}" 
            delay: 2
            retries: 90   
          when: "a_check == 'true'"

        # Auxiliary application health check status
        - block:

          - name: "[Status]: Verify that the Auxiliary Applications are running (post-chaos)"
            include: /utils/common/status_app_pod.yml
            vars:
              app_ns: "{{ item.split(':')[0] }}"
              app_label: "{{ item.split(':')[1] }}"
              delay: 2
              retries: 90
            with_items:
              - "{{ auxiliary_appinfo_list }}" 

          when: auxiliary_appinfo is defined and auxiliary_appinfo != ''

        ## RECORD EVENT FOR POST-CHAOS CHECK
        - name: "[Event]: Generating an Event for PostChaosCheck"
          include_tasks: /utils/common/generate-kubernetes-chaos-events.yml
          vars:
            stage: "PostChaosCheck"
            exp_pod_name: "{{ chaos_pod_name }}"
            engine_ns: "{{ c_ns }}"
            message: "Disk has been reattached and AUT is Running successfully"
          when: "c_engine is defined and c_engine != ''"

        ## POST-CHAOS DISK LIVENESS CHECK
        - name: "[Status]: Verify that the disk is connected to node (post-chaos)"
          include_tasks: "/utils/cloud/gcp/status_disk.yml"
          when: "cloud_platform == 'GKE'"
        
        - name: "[Status]: Verify that the disk is connected to node (post-chaos)"
          include_tasks: "/utils/cloud/aws/status_disk.yml"
          when: "cloud_platform == 'AWS'"
          
        # Checking disk is attached to node
        - debug: 
            msg: "specified disk is attached to node"   
          when: "inuse is defined and inuse == true"

        - fail:
            msg: "specified disk not re-attached to node"
          when: "inuse is defined and inuse == false"

        - set_fact:
            flag: "Pass"

        - name: "[Result]: Getting the final result of {{ c_experiment }} experiment"
          debug:
            msg: "{{ c_experiment }} experiment has been {{ flag }}ed"

      rescue:

        - set_fact:
            flag: "Fail"

        - name: "[Result]: Getting the final result of {{ c_experiment }} experiment"
          debug:
            msg: "{{ c_experiment }} experiment has been {{ flag }}ed"

      always:

        ## Getting failure step from experiment-pod
        - include_tasks: /utils/runtime/getting_failure_step.yml  

        ## RECORD END-OF-TEST IN LITMUSCHAOS RESULT CR
        - name: "[The End]: Updating the chaos result of {{ c_experiment }} experiment (EOT)"
          include_tasks: "/utils/runtime/update_chaos_result_resource.yml"
          vars:
            status: 'EOT'
            namespace: "{{ c_ns }}"
